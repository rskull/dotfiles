" ------------------------------------------------------------------------------------
" Common
" ------------------------------------------------------------------------------------
" {{{1
 
set encoding=utf-8
set fileencodings=utf-8,cp932,ucs-bom,iso-2022-jp,euc-jp 
" タブ、改行などの表示
highlight NonText guifg=lightgray ctermfg=lightgray
highlight SpecialKey guifg=lightgray ctermfg=lightgray
" set list
" set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%

" ファイル形式別プラグイン
filetype plugin on

" モードラインを有効にする
set modeline

" 3行目までをモードラインとして検索する
set modelines=3

" マウスモード
set mouse=a

" Back up setting
" set backupdir=~/.dotfiles/vim/backup
" set directory=~/.dotfiles/vim/backup

let mapleader = "\<Space>"

" シンタックスハイライト
syntax on

" インサートモードでバックスペース
set backspace=indent,eol,start

" インデント設定
set autoindent
set smartindent
set expandtab
set tabstop=4 shiftwidth=4 softtabstop=4

" 大小文字を区別しない検索
set ignorecase

" ステータスラインを表示する
set laststatus=2

" 行番号を表示する
set number

" コマンドをステータスラインに表示
set showcmd

" 補完候補を表示する
set wildmenu

" 折り返さない
set nowrap

" 行のハイライト
set cursorline

" インデントの時範囲選択を開放しない
vnoremap > >gv
vnoremap < <gv

" 括弧補完
inoremap {<Enter> {}<Left><CR><ESC><S-o>
inoremap [<Enter> []<Left><CR><ESC><S-o>
inoremap (<Enter> ()<Left><CR><ESC><S-o>

" ステータスライン
highlight StatusLine term=reverse cterm=reverse
augroup EventHook
    autocmd!
    autocmd InsertLeave * call s:changeFace('ｳﾜｧｧｧｧｧｧヽ(`Д´)ﾉｧｧｧｧｧｧﾝ!')
    autocmd CursorMoved * call s:changeFace('(((っ･ω･)っﾌﾞｰﾝ)))')
    autocmd InsertEnter * call s:changeFace('щ(ﾟдﾟщ)ｶﾓｰﾝ')
    autocmd BufWritePost * call s:changeFace('☆（ゝω・）vｷｬﾋﾟ')
    autocmd CursorHold * call s:changeFace('(´・∀・`)')
augroup END
let s:oldFace = ""
function! s:changeFace(face)
    if a:face == s:oldFace
        return
    endif
    silent let l:line = 'set statusline=\ ' . a:face
    silent let l:line .= '\ %<%l,%c=%B%=%n:%p%%\ %m%r%h%w%y\ %t\ [%{&fenc}][%{&ff}]\ '
    silent exec l:line
    silent let s:oldFace = a:face
endfunction

let g:netrw_liststyle = 3
let g:netrw_altv = 1
let g:netrw_alto = 1

" モード切替
imap <C-j> <C-[>

" プラグイン {{{1

if &compatible
  set nocompatible
endif

" Required:
set runtimepath+=$HOME/.dotfiles/vim/dein/repos/github.com/Shougo/dein.vim

" Required:
call dein#begin(expand('~/.vim/dein'))

" Let dein manage dein
" Required:
call dein#add('Shougo/dein.vim')

" Add or remove your plugins here:
call dein#add('Shougo/neosnippet.vim')
call dein#add('Shougo/neosnippet-snippets')
call dein#add('Shougo/neocomplcache')
call dein#add('Shougo/unite.vim')
call dein#add('tpope/vim-fugitive')
call dein#add('kien/ctrlp.vim')
call dein#add('flazz/vim-colorschemes')
call dein#add('scrooloose/nerdtree')
call dein#add('Xuyuanp/nerdtree-git-plugin')
call dein#add('rking/ag.vim')
call dein#add('thinca/vim-visualstar')
call dein#add('airblade/vim-gitgutter')
call dein#add('mattn/emmet-vim')
call dein#add('groenewege/vim-less')
call dein#add('osyo-manga/vim-over')
call dein#add('fatih/vim-go')
"call dein#add('gitv')
"call dein#add('TwitVim')
call dein#add('easymotion/vim-easymotion')
call dein#add('editorconfig/editorconfig-vim')
call dein#add('jacoborus/tender')
call dein#add('scrooloose/syntastic')
call dein#add('rskull/syntastic-local-eslint.vim')
call dein#add('rust-lang/rust.vim')

" You can specify revision/branch/tag.
call dein#add('Shougo/vimshell', { 'rev': '3787e5' })

" Required:
call dein#end()

" Required:
filetype plugin indent on

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

" カラースキーム
colorscheme tender

" NEDRTree

let file_name = expand("%")
if has('vim_starting') &&  file_name == ""
    autocmd VimEnter * NERDTree ./
endif

nmap <silent> <C-n> :NERDTreeToggle<CR>

let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

" ハイライト設定

set hlsearch
nmap <Esc><Esc> :nohlsearch<CR><Esc>

" YankRing

nmap ,y :YRShow<CR>
set clipboard+=unnamedplus,unnamed

" Ctags
nnoremap <C-h> :vsp<CR> :exe("tjump ".expand('<cword>'))<CR>
nnoremap <C-k> :split<CR> :exe("tjump ".expand('<cword>'))<CR>

" NeoComplache

autocmd BufRead *.php\|*.ctp\|*.tpl\|*.inc :set dictionary=~/.vim/dict/php.dict filetype=php
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_smart_case = 1
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_manual_completion_start_length = 0
let g:neocomplcache_caching_percent_in_statusline = 1
let g:neocomplcache_enable_skip_completion = 1
let g:neocomplcache_skip_input_time = '0.5'

" OverCommandLine
nnoremap <silent> <Leader>m :OverCommandLine<CR>%s/

" Twitter
let twitvim_force_ssl = 1 
let twitvim_count = 40

" Vim-easymotion
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion
let g:EasyMotion_do_mapping = 0 " Disable default mappings
nmap s <Plug>(easymotion-overwin-f)
let g:EasyMotion_smartcase = 1

" eslint
let g:syntastic_javascript_checkers=['eslint']

" エラー行に sign を表示
let g:syntastic_enable_signs = 1
" location list を常に更新
let g:syntastic_always_populate_loc_list = 0
" location list を常に表示
let g:syntastic_auto_loc_list = 0
" ファイルを開いた時にチェックを実行する
let g:syntastic_check_on_open = 0
" :wq で終了する時もチェックする
let g:syntastic_check_on_wq = 0

" golnag
set rtp+=$GOROOT/misc/vim
exe "set rtp+=".globpath($GOPATH, "src/github.com/nsf/gocode/vim")
set completeopt=menu,preview
